---
title: "Lighthouse accessibility report"
format: html
editor: visual
---

## In order for this to work...

You need to install Lighthouse and Node.js.

Through a system()-call, we will specify lighthouse-calls that will be ran in your terminal. This script is made for a windows operating system, specifically run in Windows PowerShell. The script will be stored as an html-file, and a loop will fetch the important data and save it as a dataframe.

```{r}
get_accessibilityscore <- function(list_of_pages,
                       view = FALSE,
                       keepFile = FALSE) {
  #Check the Page input if the URL is correct and includes scheme
  #if (!isTRUE(grepl("http", page))) {
   # warning("Scheme (http/https) in the URL is missing")
  #}
  
  #create an empty list to store the direction to the files
  path_list <- list()
  
  #to iterate through the pages to run lighthouse on each through system call
  for (page in list_of_pages){ 
  
    #Call the lighthouse module
    page_path <- gsub("http(s)?\\:\\/\\/", "", page)
    path <-
      paste0(
        "./",
        gsub("\\/$","",page_path),
        "_",
        Sys.Date(),
        "_",
        format(Sys.time(), "%H_%M_%S"),
        ".report.html"
      )

    sys_call <-
      paste0("lighthouse ",
             page ,
             " --output-path ",
             path,
             " --chrome-flags='--headless'", 
             if (view == TRUE) {
               " --view"
               },
             " --only-categories=accessibility")
    s <- system(sys_call, intern = TRUE)
  
    path_list <- append(path_list, path)
  }
  
  score_table <- data.frame(Accessibility = character(), Page = character())

  
  #Now its going to make the report
  for (path in path_list){ 
    
    rawHTML <- paste(readLines(path), collapse = "\n")

    #Get the Scores out of the HTML-File
    scores <-t(as.data.frame(
        stringr::str_extract_all(
          rawHTML,'.(accessibility).,.score.\\:[0-9]{1,3}\\.?[0-9]{0,2}')
      ))
    scores <-as.data.frame(gsub('"(accessibility)","score":','',scores)
      )
    scores$Page <- as.character(page)
    output <- paste0(getwd(), gsub("\\.\\/", "\\/", path))
    #if (isTRUE(keepFile)) {
     # scores$fullReport <- as.character(output)
  #  }
   colnames(scores) <-
      c("Accessibility",
        "Page")
        #if (isTRUE(keepFile)) {"fullReport"}
      #)
   rownames(scores) <- as.character(output)
   
   score_table <- rbind(score_table, scores)
  
    if (!isTRUE(keepFile)) {
      file.remove(output)}
  }

  return(score_table)
}
```

For going through webpages, make a list of the urls

```{r}
urls <- c(
  "https://ruter.no/",
  "https://www.skyss.no/",
  "https://www.atb.no/"
)
```

Then use this as input for the function above

```{r}
score = get_accessibilityscore(urls)
```

If you want the accessibility score from only one webpage, use function below

```{r}
score <- function(page,
                       view = FALSE,
                       keepFile = FALSE) {
  #Check the Page input if the URL is correct and includes scheme
  if (!isTRUE(grepl("http", page))) {
    warning("Scheme (http/https) in the URL is missing")
  }
  
  if (!is.logical(view)) {
    stop("The view should be a logical input")
  }
  if (!is.logical(keepFile)) {
    stop("The keepFile should be a logical input")
  }


  #Call the lighthouse module
  page_path <- gsub("http(s)?\\:\\/\\/", "", page)
  path <-
    paste0(
      "./",
      gsub("\\/$","",page_path),
      "_",
      Sys.Date(),
      "_",
      format(Sys.time(), "%H_%M_%S"),
      ".report.html"
    )

  sys_call <-
    paste0("lighthouse ",
           page ,
           " --output-path ",
           path,
           " --chrome-flags='--headless'", 
           if (view == TRUE) {
             " --view"
             },
           " --only-categories=accessibility")
  s <- system(sys_call, intern = TRUE)

  rawHTML <- paste(readLines(path), collapse = "\n")

  #Get the Scores out of the HTML-File
  scores <-
    t(as.data.frame(
      stringr::str_extract_all(
        rawHTML,
        '.(accessibility).,.score.\\:[0-9]{1,3}\\.?[0-9]{0,2}'
      )
    ))
  scores <-
    as.data.frame(
      gsub(
        '"(accessibility)","score":',
        '',
        scores
      )
    )
  scores$Page <- as.character(page)
  output <- paste0(getwd(), gsub("\\.\\/", "\\/", path))
  if (isTRUE(keepFile)) {
    scores$fullReport <- as.character(output)
  }
  colnames(scores) <-
    c("Accessibility",
      "Page",
      if (isTRUE(keepFile)) {
        "fullReport"
      }
    )
  rownames(scores) <- "1"

  if (!isTRUE(keepFile)) {
    file.remove(output)
  }

  return(scores)
}
```
